# -*- coding: utf-8 -*-
"""ProyekPredictive

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t08-kRHix5j834MDtkoa06ZbnORBjCfi

# **Proyek Pertama**
Prediksi harga jual mobil bekas merek "VW"

Nama: Zulfazazalia Putri Candra Wati

Email: lia.putricandrawati@gmail.com

Domisili: Bali

Install opendataset yang nantinya digunakan untuk mengambil dataset
"""

pip install opendatasets --upgrade

"""Impor opendataset yang digunakan untuk mengambil dataset yang ada pada kaggel dimana nantinya memasukkan username dan key"""

#['KAGGLE_USERNAME'] = "zulfaliaputri" 
#['KAGGLE_KEY'] = "202a7841f910c6335d48aae386e35185" 

import opendatasets as od

dataset_url = 'https://www.kaggle.com/adityadesai13/used-car-dataset-ford-and-mercedes'
od.download('https://www.kaggle.com/adityadesai13/used-car-dataset-ford-and-mercedes')

"""# **Data Loading**

Library yang digunakan dalam proyek ini sebagai berikut:
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""Load dataset"""

data_train = pd.read_csv('/content/used-car-dataset-ford-and-mercedes/vw.csv')
data_train

"""# **Data Understanding**

Deskripsi dari Variable:


*   year: merupakan tahun dari registrasi
*   price: merupakan harga dalam euro (£) dan menjadi fitur target dalam prediksi ini
*   transmission: merupakan tipe dari gearbox 
*   mileage: merupakan jarak yang di tempuh 
*   fuelType: merupakan jenis bahan bakar mesin
*   tax: merupakan pajak jalan
*   mpg: merupakan mil per gallon 
*   engineSize: merupakan ukuran mesin

Menampilkan info dari dataset yang bernilai integer, float dan object

*   Type Object terdiri dari kolom: model, transmission dan fuelType
*   Type int64 terdiri dari kolom: year, price, mileage, dan tax
*   Type float64 terdiri dari kolom: mpg dan engineSize
"""

data_train.info()

"""Mengecek nilai null pada data"""

data_train.isnull().sum()

"""Melakukan cek deskripsi yang digunakan untuk memberikan informasi statistik serta untuk melihat apakah terdapat nilai 0 pada kolom"""

data_train.describe()

"""Melakukan pengecekan missing value yang ada pada kolom tax dan engineSize"""

y = (data_train.tax == 0).sum()
z = (data_train.engineSize == 0).sum()

print("Nilai 0 di kolom tax ada: ", y)
print("Nilai 0 di kolom engineSize ada: ", z)

"""Melakukan cek pada kolom tax dikarenakan memiliki missing value yang terbanyak"""

data_train.loc[(data_train['tax']==0)]

"""Melakukan drop baris dengan nilai 'tax' dan 'engineSize' = 0"""

data_train = data_train.loc[(data_train[['tax','engineSize']]!=0).all(axis=1)]

data_train.shape

"""Melakukan cek setelah mengdrop baris untuk memastikan tidak ada nilai 0 pada kolom 'tax' dan 'engineSize'"""

data_train.describe()

"""# **Mendeteksi dan Menangani Outliers**

Membagi fitur pada dataset menjadi dua yaitu numerik dan kategorikal
"""

numerical_features = ['year', 'price', 'mileage', 'mpg', 'engineSize', 'tax']
categorical_features = ['model', 'transmission', 'fuelType']

"""Visualisasi fitur numerik dalam pengecekan outliers"""

for numcolum in numerical_features :
  sns.boxplot(x=data_train[numcolum])
  plt.show()

"""Bila dilihat dari gambar diatas maka terdapat outliers sehingga perlu dilanjutkan ke tahap selanjutnya untuk mengatasi outliers pada fitur numerik

Melakukan IQR Method dalam menangani outliers pada fitur numerik
"""

Q1 = data_train.quantile(0.25)
Q3 = data_train.quantile(0.75)

IQR=Q3-Q1
data_train=data_train[~((data_train<(Q1-1.5*IQR))|(data_train>(Q3+1.5*IQR))).any(axis=1)]

data_train.shape

"""Mengecek dataset pada head"""

data_train.head()

"""# **Analisis Univariate EDA**

Analisis ini dilakukan pada fitur kategorikal dan numerikal.

## Categorical Features

Untuk fitur kategorikal yaitu model, fuelType, dan transmission. Dimana analisis terdiri dari kategori, jumlah sample dan persentase. Kemudian menampilkan grafik

### Fitur Model
"""

count = data_train['model'].value_counts()
percent = 100*data_train['model'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sample':count, 'persentase':percent.round(1)})
print(df)
print('Total Model: ',len(data_train['model'].unique()))

plt.figure(figsize=(30,10))
sns.countplot(data_train['model'])
plt.show()

"""# Fitur Transmission"""

count = data_train['transmission'].value_counts()
percent = 100*data_train['transmission'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sample':count, 'persentase':percent.round(1)})
print(df)
print('Total Transmission: ',len(data_train['transmission'].unique()))

plt.figure(figsize=(20,8))
sns.countplot(data_train['transmission'])
plt.show()

"""# Fitur Fuel Type"""

count = data_train['fuelType'].value_counts()
percent = 100*data_train['fuelType'].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sample':count, 'persentase':percent.round(1)})
print(df)
print('Total Transmission: ',len(data_train['fuelType'].unique()))

plt.figure(figsize=(20,8))
sns.countplot(data_train['fuelType'], palette='Reds')
plt.show()

"""## Numerical Features

Pada analisis ini menampilkan histogram dari fitur numerik termasuk 'price' yang menjadi target
"""

data_train.hist(bins=50, figsize=(20,15))
plt.show()

"""Bila dilihat dari histogram diatas yaitu 'price' dimana rentang 10.000-15.000(£) memiliki harga terbanyak bila dibandingkan dengan rentang harga lainnya

# **Analisis Multivariate EDA**

Pada analisis ini terdiri dari fitur kategori dan numerik

## Categorical Features

Pada fitur ini dilakukan analisis untuk mengamati rata-rata 'price' relatif terhadap fitur kategori. Yang bila dilihat dari gambar dibawah ini fitur kategori kurang memiliki pengaruh terhadp 'price'
"""

cat_features = data_train.select_dtypes(include='object').columns.to_list()
 
for numcolum in cat_features:
  sns.catplot(x=numcolum, y="price", kind="bar", dodge=False, height = 5, aspect = 6,  data=data_train, palette="Set3")
  plt.title("Rata-rata 'Price' Relatif terhadap - {}".format(numcolum))

"""## Numerical Features

Pada analisis ini dilakukan untuk melihat korelasi antar fitur numerik dengan fitur target yaitu 'price'
"""

sns.pairplot(data_train, diag_kind = 'kde')

"""Bila dilihat dari gambar diatas maka relasi yang tinggi ada pada year, mileage dan mpg tetapi untuk tax dan engineSize memiliki relasi yang rendah

Untuk memastikan korelasi yang didapat tadi benar maka dapat mengeceknya dengan menggunakan fungsi corr().

Dan hasil yang terlihat pada grafik korelasi ini yaitu year, mileage, tax dan mpg  yang memiliki skor korelasi tinggi dengan fitur target 'price'
"""

plt.figure(figsize=(10, 8))
correlation_matrix = data_train.corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='YlGnBu', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""Drop fitur engineSize dikarenkan memiliki korelasi yang rendah"""

data_train.drop(['engineSize'], inplace=True, axis=1)
data_train.head()

len(data_train)

"""# **Data Preparation**

pada persiapan data digunakan beberarap tahapan yaitu encoding, train_test_split dan standarisasi

## Encoding

Pada tahap ini melakukan teknik *one-hot-encoding* dimana menggunakan fitur kategori dikarenakan masih terdapat kategori sehingga harus diubah ke numerik terlebih dahulu
"""

from sklearn.preprocessing import  OneHotEncoder
data_train = pd.concat([data_train, pd.get_dummies(data_train['model'], prefix='model', drop_first=False)],axis=1)
data_train = pd.concat([data_train, pd.get_dummies(data_train['transmission'], prefix='trans', drop_first=False)],axis=1)
data_train = pd.concat([data_train, pd.get_dummies(data_train['fuelType'], prefix='fuel', drop_first=False)],axis=1)

data_train.drop(['model'], axis=1, inplace=True)
data_train.drop(['transmission'], axis=1, inplace=True)
data_train.drop(['fuelType'], axis=1, inplace=True)
data_train.head()

"""Menampilkan info data setelah dilakukannya *one-hot-encoding*"""

data_train.info()

"""## Train_test_split

Dimana pada tahapan ini membagi dataset menjadi data latih dan data uji sebelum membuat model. Dimana proporsi pada train dan test yaitu 90:10
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
 
X = data_train.drop(["price"],axis =1)
y = data_train["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 45)

"""Menampilkan jumlah total dataset, data latih, dan uji"""

print(f'Jumlah total dataset: {len(X)}')
print(f'Jumlah data latih pada dataset: {len(X_train)}')
print(f'Jumlah data uji pada dataset: {len(X_test)}')

"""## Standarisasi

Dimana pada tahapan ini mengurangkan mean (nilai rata-rata) kemudian membaginya dengan standar deviasi untuk menggeser distribusi. Pada tahapan ini menggunakan fitur numerik.
"""

from sklearn.preprocessing import StandardScaler
 
numerical_features = ['year', 'mileage', 'mpg', 'tax']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""Bila dilihat dari tabel dibawah ini bahwa nilai mean = 0 dan standar deviasi = 1."""

X_train[numerical_features].describe().round(4)

"""# **Modeling**

Pada tahap ini menggunakan 3 model yaitu Decission tree, Random Forest dan Boosting. Tahap ini melatih data training dan menyimpan data testing untuk dilatih di tahap evaluasi. Pada tahap model ini juga terdapat penggunaan hyperparameter tuning.

Pada tahap pertama menyiapkan data frame terlebih dahulu
"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['DecisionTree', 'RandomForest', 'Boosting'])

"""## Model Decision Tree

Menggunakan teknik DecisionTreeRegressor dari library Scikitlearn

"""

from sklearn.tree import DecisionTreeRegressor

dec =  DecisionTreeRegressor(max_depth=12, random_state=30)
dec.fit(X_train, y_train)
 
y_pred_dec= dec.predict(X_train)

"""# Model Random Forest

Menggunakan teknik RandomForestRegressor dari library Scikitlearn 
"""

from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
 
RF = RandomForestRegressor(n_estimators=35, max_depth=12, random_state=50, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""# Model Boosting (AdaBoost)

Menggunakan teknik AdaBoostRegressor dari library Scikitlearn. 
"""

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(n_estimators=35, learning_rate=0.05, random_state=30)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""# **Evaluation**

Pada tahap ini digunakan untuk mengevaluasi metrik yang digunakan. Dimana pada prediksi ini menggunakan metrik MSE yang digunakan untuk menghitung selisih rata-rata nilai sebenarnya dengan nilai prediksi

Pertama dilakukan scaling fitur numerik pada data uji dikarenakan proses scaling pada data latih telah dilakukan
"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""Melakukan evaluasi 3 model machine learning yaitu Decision tree, Random Forest dan Boosting dengan metrik MSE."""

mse = pd.DataFrame(columns=['train', 'test'], index=['RF','Boosting'])
model_dict = {'DecisionTree':dec, 'RF': RF, 'Boosting': boosting}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
mse

"""Dari tabel diatas didapatkan bahwa yang memberikan nilai error terkecil yaitu Random Forest. Untuk memudahkannya dibuat plot metrik dengan *bar chart*. Dan setelah dilihat pada bar chart dibawah ini maka Random Forest menjadi model terbaik dalam melakukan prediksi harga jual mobil bekas VW"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Melakukan prediksi dari tiga model dengan data test"""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(2)
 
pd.DataFrame(pred_dict)

"""Dilihat dari prediksi bahwa prediksi yang paling mendekati yaitu random forest sehingga model yang dapat menjadi solusi baik dalam memprediksi harga jual mobil bekas VW yaitu *Random Forest*"""